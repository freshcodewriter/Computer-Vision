{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh15200\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Canny Edge Detection\

\f1\b0\fs28 There are three functional code in my assignment, which are 
\f2\i \cf4 \cb1 findDerivatives.m/py, nonMaxSup.m/py and edgeLink.m/py.   
\f1\i0 \
1. 
\f2\i findDerivatives.py: 
\f1\i0 Apply Gaussian smoothing and compute local edge gradient magnitude as well as orientation. \
2. 
\f2\i nonMaxSup.py: 
\f1\i0 Seek local maximum edge pixel in corresponding orientation. \
3. 
\f2\i dgeLink.py: 
\f1\i0 Continue search in the edge orientation of detected edge points
\fs32 \cf2 \cb3 \
\

\f0\b\fs48 Testing\

\f1\b0\fs32 Using the file 
\f2\i cannyEdge.py
\f1\i0  to test the images. By modifying the folder name as \'93canny_dataset\'94, on could test the provided images. By modifying the folder name as \'93my_dataset\'94, one could test my own dataset. \
\
Ps: I test the code using jupyter_testing_script.ipynb. If you using jupyter, you could use this file to test. Otherwise, you could just use 
\f2\i cannyEdge.py
\f1\i0  for testing.}