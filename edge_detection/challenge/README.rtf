{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 .SFNSDisplay;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 .SFNSDisplay-Semibold;\f4\froman\fcharset0 Times-Italic;\f5\fnil\fcharset0 HelveticaNeue-Italic;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red10\green77\blue204;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;
\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15500\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Canny Edge Detection for Low Light Images\

\f1\b0\fs32 This section aims to investigate the optimal threshold setting for 
\f2 Low Light Images. I tune the parameters manually, since I think some more advanced techniques may involve if I want to tune the parameters automatically. But due to the time constraints of this project, I choose to set the parameters manually. \

\f0\b\fs48 \
\pard\pardeftab720\sl440\sa320\partightenfactor0

\fs36 \cf2 \ul \ulc2 Image with good lighting condition 
\f2\b0\fs32 \ulnone \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf2 In setting double threshold for edge detection, it is expected that the threshold value is closely related to the mean and standard deviation of the image. \
For normal images with good condition of light, after testing 11 images, the magnitude of derivatives is as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Mean: ~10 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Standard deviation: ~13\
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf2 After testing 11 images and conducting regression, optimal setting of the double threshold is as follows:\
    highThreshold_ratio = (mean+3*std)/maximum\
    lowThreshold_ratio = (mean+0.2*std)/maximum\
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs36 \cf4 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 \ul Low Light Images\ulnone \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f2\b0\fs32 \cf2 For images with low lighting, after testing 11 pictures, the magnitude of derivatives is as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Mean: ~3 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Standard deviation: ~7
\f0\b \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f2\b0 \cf2 Therefore, one could conclude that the mean and standard deviation of low light images are significantly lower than normal images. 
\f0\b This indicates that the gradient change in low light picture is smaller, and the variance of gradient change is smaller as well. \

\f2\b0 My intuition behind the parameters setting includes: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
As the mean is smaller and gradient change is smaller, we may need to decrease the low threshold so that the algorithm would not zero out too many edges whose gradient change is smaller. \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
As the mean is smaller and gradient change is smaller, we may need to increase the high threshold so that the algorithm would choose too many pixels as the edge. Otherwise, the detected edges would become very thick and noisy. \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
As the standard deviation is smaller and the variance of gradient change is smaller, we may need to decrease the high threshold so that the algorithm would not zero out too many edges whose gradient change is smaller. \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf2 Therefore, after testing 11 images and conducting regression, optimal setting of the double threshold is as follows:\
    highThreshold = (mean+8*std)/maximum\
    lowThreshold = (mean+std)/maximum\
\
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f3\b\fs36 \cf2 \ul Code
\f2\b0\fs32 \ulnone \
\pard\tx3198\pardeftab720\sl360\sa320\partightenfactor0
\cf2 The code is similar to what we do in canny edge detection, which includes 
\f4\i \cf5 \cb1 findDerivatives.py, nonMaxSup.py and edgeLink.py. 
\f2\i0 While I modified the threshold setting so that the algorithm could adapt to low light image condition. \
\
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \ul \ulc2 Testing
\fs48 \ulnone \

\f2\b0\fs32 Using the file 
\f5\i \cf2 \cb3 cannyEdge.py
\f2\i0 \cf2 \cb3  to test the images. By modifying the folder name as \'931a_extra_credit_result\'94, on could test the provided images. \
Ps: I test the code using jupyter_testing_script.ipynb. If you using jupyter, you could use this file to test. Otherwise, you could just use 
\f5\i \cf2 \cb3 cannyEdge.py
\f2\i0 \cf2 \cb3  for testing.\
}